{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/CelpipSoftware/celpipSW/src/MainApps/Dashboard/General/NoticeBoardOld/NoticeBoxContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport classes from './NoticeBoxContainer.module.css';\nimport NoticeBox from './NoticeBox';\nimport NoticeBoardToolBar from './NoticeBoardToolBar';\n//import {getdashboardnotice} from '../../../../CommonApps/AllAPICalls';\n//getuser, getnotice,getnoticebyId\n\nimport { marknoticeasread } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction containsObject(obj, list) {\n  var i;\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === obj.id) {\n      return true;\n    }\n  }\n  return false;\n}\nconst NoticeBoxContainer = props => {\n  _s();\n  console.log(\"NoticeBox Container rendering. . .\");\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    props.passMountInfo(true);\n    return () => {\n      isMounted.current = false;\n      props.passMountInfo(false);\n    };\n  }, [props]);\n  const markAsReadHandler = noticeId => {\n    //console.log(\"mark as read\", noticeId);     \t   \n    // putnoticeIddash({noticeId});\t  \n    // window.location.reload(false);\n  };\n\n  /*\n  useEffect(()=>{\n  \n  \n     //getnotice({getNoticeData});\n          let noticeIdArray=[];\n  \tlet propsCourseData = props.courseData;\n  \t   propsCourseData.forEach((course, index)=>{\n                         //console.log(\"noticeobjects\",course.noticeobjects[0])\n                         course.noticeobjects.forEach((noticeId, indexI)=>{  \n  \t\t\t      // console.log('noticeId: ', noticeId)\n                               if ( noticeIdArray.indexOf(noticeId) < 0){noticeIdArray.push(noticeId)}\n  \n  \t\t       })\n  \t\t                                                    \n  \n  \n  \n  \t          }\n  \t    );   \n          \n  \n      getNoticeIds(noticeIds=>noticeIdArray);\t\n  \n   return ()=>{\n    getNoticeIds(noticeIds=>[]);\n  \n   }\n  \n  \n  },[ props.courseData]);\n  \n  \n  \n  \n  useEffect(()=>{\n  \n     noticeIds.forEach((noticeid, index)=>{\n  \n        getnoticebyId({noticeid, getNoticeData});\n  \n     });\n  \n    return ()=>{\n             getNoticeData(noticeData=>[]);\n         }\n  \n  },[noticeIds]);\n  \n  \n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.noticeBoxContainer,\n    children: [/*#__PURE__*/_jsxDEV(NoticeBoardToolBar, {\n      closeNoticeBoard: props.closeNoticeBoard,\n      courseData: props.courseData,\n      socketObj: props.socketObj,\n      userData: props.userData,\n      rerender: props.rerender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this), props.dashboardNotice !== null && props.dashboardNotice.dashnotices !== null && props.dashboardNotice.dashnotices.map((notice, index) => {\n      let list = props.userData.noticeids;\n      let isRead = containsObject(notice, list);\n      let noticeId = notice.id;\n      return /*#__PURE__*/_jsxDEV(NoticeBox, {\n        read: !isRead,\n        Notice: notice,\n        markAsRead: () => markAsReadHandler(noticeId)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 1\n  }, this);\n};\n_s(NoticeBoxContainer, \"SkOohDVuXBk0DO6XXkvUZnCZ6So=\");\n_c = NoticeBoxContainer;\nexport default NoticeBoxContainer;\nvar _c;\n$RefreshReg$(_c, \"NoticeBoxContainer\");","map":{"version":3,"names":["React","useRef","useEffect","classes","NoticeBox","NoticeBoardToolBar","marknoticeasread","jsxDEV","_jsxDEV","containsObject","obj","list","i","length","id","NoticeBoxContainer","props","_s","console","log","isMounted","current","passMountInfo","markAsReadHandler","noticeId","className","noticeBoxContainer","children","closeNoticeBoard","courseData","socketObj","userData","rerender","fileName","_jsxFileName","lineNumber","columnNumber","dashboardNotice","dashnotices","map","notice","index","noticeids","isRead","read","Notice","markAsRead","_c","$RefreshReg$"],"sources":["/home/bibhu/CelpipSoftware/celpipSW/src/MainApps/Dashboard/General/NoticeBoardOld/NoticeBoxContainer.js"],"sourcesContent":["import React,{useRef,useEffect} from 'react';\nimport classes from './NoticeBoxContainer.module.css';\nimport NoticeBox from './NoticeBox';\nimport NoticeBoardToolBar from './NoticeBoardToolBar';\n//import {getdashboardnotice} from '../../../../CommonApps/AllAPICalls';\n//getuser, getnotice,getnoticebyId\n\n\nimport {marknoticeasread} from '../../../../CommonApps/AllAPICalls';\n\nfunction containsObject(obj, list) {\n\n\n    var i;\n    for (i = 0; i < list.length; i++) {\n        if (list[i].id === obj.id) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n\n\n\n\n\nconst NoticeBoxContainer =(props)=>{\n\n\n   console.log(\"NoticeBox Container rendering. . .\");\n\n\n   const isMounted = useRef(false);\n\n    useEffect(() => {\n    isMounted.current = true;\n    props.passMountInfo(true);\n    return () => {\n            isMounted.current = false\n            props.passMountInfo(false);\n    }\n   }, [props]);\n\n\n\n\n\n\n\n   const markAsReadHandler=(noticeId)=>{\n          //console.log(\"mark as read\", noticeId);     \t   \n\t  // putnoticeIddash({noticeId});\t  \n\t  // window.location.reload(false);\n   }\n\n\n\n\n\n\n\n\n\n\n/*\nuseEffect(()=>{\n\n\n   //getnotice({getNoticeData});\n        let noticeIdArray=[];\n\tlet propsCourseData = props.courseData;\n\t   propsCourseData.forEach((course, index)=>{\n                       //console.log(\"noticeobjects\",course.noticeobjects[0])\n                       course.noticeobjects.forEach((noticeId, indexI)=>{  \n\t\t\t      // console.log('noticeId: ', noticeId)\n                             if ( noticeIdArray.indexOf(noticeId) < 0){noticeIdArray.push(noticeId)}\n\n\t\t       })\n\t\t                                                    \n\n\n\n\t          }\n\t    );   \n        \n\n    getNoticeIds(noticeIds=>noticeIdArray);\t\n\n return ()=>{\n  getNoticeIds(noticeIds=>[]);\n\n }\n\n\n},[ props.courseData]);\n\n\n\n\nuseEffect(()=>{\n\n   noticeIds.forEach((noticeid, index)=>{\n\n      getnoticebyId({noticeid, getNoticeData});\n\n   });\n\n  return ()=>{\n           getNoticeData(noticeData=>[]);\n       }\n\n},[noticeIds]);\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn (\n\n<div className={classes.noticeBoxContainer}>\n\n\n   <NoticeBoardToolBar closeNoticeBoard={props.closeNoticeBoard} \n\t               courseData = {props.courseData}\n\t               socketObj = {props.socketObj}\n\t               userData = {props.userData}\n\t               rerender = {props.rerender}\n\t/>\n\n\n\n   { props.dashboardNotice !==null && props.dashboardNotice.dashnotices !==null &&  props.dashboardNotice.dashnotices.map((notice, index)=>{\n\n           let list = props.userData.noticeids;\n\t   let isRead = containsObject(notice, list);\n           let noticeId = notice.id;\n          return <NoticeBox read={!isRead} \n\t                    Notice={notice} \n\t                    key={index}\n                            markAsRead={()=>markAsReadHandler(noticeId)}\n\n\t\t   />\n\n      })\n   }\n\n\n\n\n</div>\n\n);\n\n}\n\n\nexport default NoticeBoxContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}