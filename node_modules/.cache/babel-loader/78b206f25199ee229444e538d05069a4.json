{"ast":null,"code":"/* eslint-disable no-undef */\nimport { log } from '../utils/log';\nimport { CREATE_FFMPEG_CORE_IS_NOT_DEFINED } from '../utils/errors';\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\n\nconst toBlobURL = async (url, mimeType) => {\n  log('info', `fetch ${url}`);\n  const buf = await (await fetch(url)).arrayBuffer();\n  log('info', `${url} file size = ${buf.byteLength} bytes`);\n  const blob = new Blob([buf], {\n    type: mimeType\n  });\n  const blobURL = URL.createObjectURL(blob);\n  log('info', `${url} blob URL = ${blobURL}`);\n  return blobURL;\n}; // eslint-disable-next-line\n\n\nexport const getCreateFFmpegCore = async _ref => {\n  let {\n    corePath: _corePath,\n    workerPath: _workerPath,\n    wasmPath: _wasmPath\n  } = _ref;\n\n  // in Web Worker context\n  // eslint-disable-next-line\n  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n    if (typeof _corePath !== 'string') {\n      throw Error('corePath should be a string!');\n    }\n\n    const coreRemotePath = new URL(_corePath, import.meta.url).href;\n    const corePath = await toBlobURL(coreRemotePath, 'application/javascript');\n    const wasmPath = await toBlobURL(_wasmPath !== undefined ? _wasmPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'), 'application/wasm');\n    const workerPath = await toBlobURL(_workerPath !== undefined ? _workerPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'), 'application/javascript');\n\n    if (typeof createFFmpegCore === 'undefined') {\n      return new Promise(resolve => {\n        globalThis.importScripts(corePath);\n\n        if (typeof createFFmpegCore === 'undefined') {\n          throw Error(CREATE_FFMPEG_CORE_IS_NOT_DEFINED(coreRemotePath));\n        }\n\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath\n        });\n      });\n    }\n\n    log('info', 'ffmpeg-core.js script is loaded already');\n    return Promise.resolve({\n      createFFmpegCore,\n      corePath,\n      wasmPath,\n      workerPath\n    });\n  }\n\n  if (typeof _corePath !== 'string') {\n    throw Error('corePath should be a string!');\n  }\n\n  const coreRemotePath = new URL(_corePath, import.meta.url).href;\n  const corePath = await toBlobURL(coreRemotePath, 'application/javascript');\n  const wasmPath = await toBlobURL(_wasmPath !== undefined ? _wasmPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'), 'application/wasm');\n  const workerPath = await toBlobURL(_workerPath !== undefined ? _workerPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'), 'application/javascript');\n\n  if (typeof createFFmpegCore === 'undefined') {\n    return new Promise(resolve => {\n      const script = document.createElement('script');\n\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n\n        if (typeof createFFmpegCore === 'undefined') {\n          throw Error(CREATE_FFMPEG_CORE_IS_NOT_DEFINED(coreRemotePath));\n        }\n\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath\n        });\n      };\n\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n\n  log('info', 'ffmpeg-core.js script is loaded already');\n  return Promise.resolve({\n    createFFmpegCore,\n    corePath,\n    wasmPath,\n    workerPath\n  });\n};","map":null,"metadata":{},"sourceType":"module"}